I"c&<p><br /></p>

<h1 id="0x00-介绍">0x00 介绍</h1>
<hr />

<p>PowerShell 是一种具有面向对象的动态类型脚本语言，因为它预先安装在大多数 Windows 计算机上，可以直接访问特权系统功能，还可以直接从内存执行，所以 PowerShell 也在越来越多的网络攻击中使用。其中如何实现对脚本语言去混淆仍是一个未解决的研究问题，下图展示了目前具有代表性的脚本去混淆方法，以及在混淆检测精度、恢复质量和开销方面的比较。</p>

<p><img src="https://bu-shuo.github.io/image/2021-08-01-01.png" alt="具有代表性的去混淆方法比较" /></p>

<p>虽然本文的目标是 PowerShell，但去混淆方法也适用于如 JavaScript 等其他脚本。对于一个被混淆的脚本，在执行前会先将混淆的脚本片段恢复到原始脚本片段，所以本文的一个重点也就是如何精确地识别这些可恢复的脚本片段。在解决了混淆问题后，便可以设计基于语义的 PowerShell 攻击检测系统。</p>

<h1 id="0x01-贡献">0x01 贡献</h1>
<hr />

<ol>
  <li>为 PowerShell 脚本设计了第一种有效且轻量级的基于子树的去混淆方法，该方法在 PowerShell 脚本抽象语法树（AST）的子树上执行混淆检测和基于仿真的恢复。</li>
  <li>基于新的去混淆方法，设计了第一个语义感知的 PowerShell 攻击检测系统，该系统采用面向关联（OOA）挖掘算法获取 PowerShell 攻击特征。</li>
  <li>通过去混淆方法可以将混淆脚本与原始脚本的相似度从 0.5% 提高到 80% 左右，在使用去混淆方法后，语义感知攻击检测系统的平均准确率为 92.3% ，误报率为 0% ，同等情况下要优于 Windows Defender 和 Virus Total。</li>
</ol>

<h1 id="0x02-背景">0x02 背景</h1>
<hr />

<h3 id="1-通过-powershell-发起的-lotl-攻击和无文件攻击">1. 通过 PowerShell 发起的 LotL 攻击和无文件攻击</h3>

<ul>
  <li><strong>LotL 攻击:</strong> 指在攻击过程中尽可能减少文件的产生，只使用纯净的系统工具来躲避检测。</li>
  <li><strong>无文件攻击：</strong> 指避免在磁盘上留下任何痕迹的攻击。</li>
</ul>

<p>使用 PowerShell 发起攻击的原因：</p>
<ol>
  <li>从 Windows 7 和 Windows Server 2008 R2 开始，所有 Windows 电脑都预装了 PowerShell。</li>
  <li>作为一个强大的第三方管理工具，PowerShell 提供了对所有主要 Windows 组件的访问。</li>
  <li>PowerShell 脚本可以直接从内存中执行，不需要任何形式的隔离，因此可以避免在磁盘上留下恶意文件，并绕过传统的基于文件的防御方法。</li>
</ol>

<h3 id="2-powershell-的混淆技术">2. PowerShell 的混淆技术</h3>

<ol>
  <li><strong>随机化（Randomization）：</strong> 攻击者在不影响脚本执行和语义的情况下对脚本进行随机更改，包括空格随机化、大小写随机、变量和函数名随机化，以及被 PowerShell 忽略的字符，这些技术利用了 PowerShell 解释器对脚本属性不敏感的特点。</li>
  <li><strong>字符串操作（String manipulation）：</strong> 使用包括字符串拆分、字符串反转和字符串重新排序的方法对 PowerShell 中的字符串进行混淆。</li>
  <li><strong>编码（Encoding）：</strong> 编码混淆后的脚本只能反映很少原始脚本的信息。</li>
</ol>

<h3 id="3-混淆技术在-powershell-攻击检测中的有效性">3. 混淆技术在 PowerShell 攻击检测中的有效性</h3>

<p>作者选择了五种具有代表性的混淆方案，并结合不同构造层次的模糊技术和不同的编码方法，前四种混淆方案如下图所示，而对于方案 S5 ，作者采用了基于 AST 的混淆。</p>

<p><img src="https://bushuo.github.io/image/2021-08-01-02.png" alt="混淆方案" /></p>

<p>通过对 75 个良性样本和 75 个恶意样本使用上述混淆方式处理后，将原始样本和混淆后的脚本上传至 VirusTotal，实验结果如下图所示，几乎所有混淆方案都可以有效地绕过杀毒软件。</p>

<p><img src="https://bushuo.github.io/image/2021-08-01-03.png" alt="VirusTotal 检测结果" /></p>

<h1 id="0x03-总体框架">0x03 总体框架</h1>
<hr />

<p>作者为 PowerShell 设计了一种有效的、轻量级的去混淆机制，并将其作为关键模块，开发了第一个语义感知的 PowerShell 攻击检测系统，攻击检测过程分为如下图三个阶段：</p>

<p><img src="https://bu-shuo.github.io/image/2021-08-01-04.png" alt="总体框架" /></p>

<ol>
  <li><strong>去混淆阶段（Deobfuscation phase）：</strong> 将 AST 子树视为混淆的最小单元，并在子树上执行恢复，最后构造去混淆后的脚本。这种去混淆功能不仅有利于对 PowerShell 攻击的检测，而且有利于对其分析和取证。</li>
  <li><strong>训练和检测阶段（Training and detection phases）：</strong> 对恶意 PowerShell 脚本数据库采用经典的面向对象关联（Objective-oriented Association，OOA）挖掘算法，实现自动提取 31 条用于签名匹配的 OOA 规则。</li>
  <li><strong>应用场景（Application scenarios）：</strong> 基于去混淆的语义感知攻击检测系统主要是基于静态分析，与动态分析的检测方法相比，具有更高的代码覆盖率和更低的开销；与现有基于静态分析的攻击检测方法相比，更适合处理混淆场景。所以作者提出的系统可以部署到实时攻击检测、大规模恶意软件自动分析等系统。</li>
</ol>

<h1 id="0x04-powershell-去混淆技术">0x04 PowerShell 去混淆技术</h1>
<hr />

<p>作者之所以使用静态方式去混淆主要有以下两点原因：</p>
<ol>
  <li>动态方法需要对现有系统或解释器进行额外的修改或者带来更大的开销</li>
  <li>动态方法有一个已知的限制，即低覆盖率。
由于在实际攻击中，脚本中可恢复的部分与其他部分之间没有明确界限，特别是当脚本被多层混淆时。所以作者针对该问题设计了一种基于 AST 子树的方法，首先定位可恢复的片段然后再重新构建原始脚本。具体过程如下图所示，可以分为五个阶段：</li>
</ol>

<p><img src="https://bu-shuo.github.io/image/2021-07-25-03.png" alt="命令行到目的的映射" /></p>

<p>在将单个命令映射到执行目的后，作者对所有的二进制文件匹配了特定的执行目的，最终将执行目的分为九个类别：</p>

<ol>
  <li>关于执行的类别
    <ul>
      <li>代理执行（Proxied Execution）</li>
      <li>持久化（Persistence）</li>
      <li>延迟执行（Delayed Execution）</li>
    </ul>
  </li>
  <li>关于修改底层系统组件的类别
    <ul>
      <li>防火墙的修改（Firewall Modification）</li>
      <li>注册表的修改（Registry Modification）</li>
      <li>权限修改（Permission Modification）</li>
    </ul>
  </li>
  <li>无关执行与系统修改的
    <ul>
      <li>打开文件（File Open）</li>
      <li>侦察（Reconnaissance）</li>
      <li>终止任务（Task Stopping）</li>
    </ul>
  </li>
</ol>

<h1 id="0x05-评估结果">0x05 评估结果</h1>
<hr />

<ol>
  <li>LotL 技术在商业恶意软件中的流行程度</li>
</ol>

<p><img src="https://bu-shuo.github.io/image/2021-07-25-04.png" alt="LotL 技术在商业恶意软件中的流行程度" /></p>

<ol>
  <li>LotL 技术使用的参数及执行目的</li>
</ol>

<p><img src="https://bu-shuo.github.io/image/2021-07-25-05.png" alt="LotL 技术使用的参数及执行目的" /></p>

<ol>
  <li>使用 LotL 技术的恶意软件家族分布</li>
</ol>

<p><img src="https://bu-shuo.github.io/image/2021-07-25-06.png" alt="使用 LotL 技术的恶意软件家族分布" /></p>

<ol>
  <li>良性软件与恶意软件使用 LotL 技术目的比较</li>
</ol>

<p><img src="https://bu-shuo.github.io/image/2021-07-25-07.png" alt="良性软件与恶意软件使用 LotL 技术目的比较" /></p>

<ol>
  <li>样本中使用 LotL 二进制文件超过 50% 的 APT 攻击</li>
</ol>

<p><img src="https://bu-shuo.github.io/image/2021-07-25-08.png" alt="样本中使用 LotL 二进制文件超过 50% 的 APT 攻击" /></p>
<h1 id="0x06-案例研究">0x06 案例研究</h1>
<hr />

<p>作者对 Gandcrab 和 Cerber 两个勒索软件家族的样本进行分析，还对 Turla 和 GreyEnergy 两个 APT 组织的样本也进行了分析。如下图展示了 Turla 组织在其近期的恶意软件活动中采用的 LotL 技术，包括恶意行为者如何演变来隐藏他们的行动。</p>

<p><img src="https://bu-shuo.github.io/image/2021-07-25-09.png" alt="Turla 组织采用的 LotL 技术" /></p>

<h1 id="0x07-总结">0x07 总结</h1>
<hr />

<p>作者通过检测了几个不同的恶意软件数据集，并进行了一个 AV 评估实验，确认了几种提出的 LotL 技术的低检测率，同时研究良性样本与恶意样本在执行目的上的差异时，为检测算法的发展提供了一个方向。实验结果也说明了 LotL 技术在目前的恶意软件中应用广泛，从检测角度来看， LotL 技术也对于安全行业存在巨大的挑战。</p>

<h1 id="0x08-理解">0x08 理解</h1>
<hr />

<p>这篇论文通过对真实样本的评估，第一次系统地介绍和阐述了 LotL 技术在恶意软件中的应用情况和检测结果，实验结果也说明了目前主流的杀毒软件并不能很好地应对 LotL 攻击，因为在更换一次有效载荷之后检测结果降低了 4/5，这也说明对于 LotL 的检测有可能还是基于匹配的检测，所以作者在最后的展望中也提到了，未来工作包括了对 LotL 的检测。</p>
:ET