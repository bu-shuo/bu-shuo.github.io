I"i1<p><br /></p>

<h1 id="0x00-介绍">0x00 介绍</h1>
<hr />

<p>针对大型企业系统的攻击在全球范围内呈上升趋势，端点监控系统将这些复杂的攻击活动记录为审计日志，接着安全分析师对审计日志进行因果分析并确定攻击过程。但是正常系统产生的审计日志数量却非常多，最新的研究方向主要是通过消除审计日志中的无关操作来提高因果分析能力，另一个方向是提高日志查询系统的效率，但这些改进都不会使工作消耗大幅减少，所以分析师面临的主要问题还是低级审计事件和高级系统行为之间的语义差距。虽然行为抽象听起来很有前途，但提取行为并推断语义主要面临两个主要挑战：事件语义区分和行为识别。由于大规模审计事件高度交错，划分事件和识别行为边界就像大海捞针。<br />
为了解决上述问题，作者设计了 WATSON，该系统通过聚合审计事件的语义来建立行为模式，利用基于翻译的嵌入模型，根据审计日志的上下文信息推断审计事件的语义，然后再聚合语义来作为高级行为的表示并区分出安全分析师需要的行为。作者在企业环境中模拟了 17 个正常程序和 8 个现实生活的攻击，并且对 WATSON 的正确性和可解释性进行了评估。</p>

<h1 id="0x01-贡献">0x01 贡献</h1>
<hr />

<ol>
  <li>本文设计的 WATSON 是第一种从低级日志中抽象高级行为的系统，通过使用信息流作为指导总结行为，并通过聚合审计事件的上下文语义来派生行为语义。</li>
  <li>提出了通过上下文信息推断日志语义的新思想，提供行为语义的定量表示，并将其用来聚类相似的行为和提取代表性的行为。</li>
  <li>对常见的良性行为和现实中的恶意行为进行系统评估，结果表明 WATSON 能够有效地抽取高层次行为，减少日志分析中的工作量。</li>
</ol>

<h1 id="0x02-背景">0x02 背景</h1>
<hr />

<h3 id="1-现实攻击">1. 现实攻击：</h3>

<p>当窃取机密内容时，为了扰乱分析人员的视线，窃密者会先将 secret.txt 用 gcc 进行编译后再使用 git 上传。研究人员为了便于攻击因果分析，普遍采用溯源图来有效跟踪审计日志中的信息流，如下图所示，分析人员会先从警告事件执行时间轴向前的跟踪（backward tracking）找到攻击的根源，然后分析人员对发现的初始漏洞再执行时间轴向后的跟踪（forward tracking）研究攻击产生的一系列后果。</p>

<p><img src="https://bu-shuo.github.io/image/2021-08-08-01.png" alt="攻击溯源图" /></p>

<h3 id="2-挑战">2. 挑战：</h3>

<p>在捕获攻击序列和来源时，研究人员不仅需要识别恶意行为（如数据泄露），还需要识别并排除良性行为（如程序编译和上传），尽管溯源图提供了可视化的因果关系，但并没有删除其中不相关的事件。由于审计日志数量过于庞大，分析人员需要花费过多的时间来调查无关事件。从审计日志中提取行为是分析专家在分析过程中的有效策略，这个过程想要自动化面临两个挑战：</p>

<ol>
  <li>系统级别审计事件的推断：现有工作主要使用专家定义的规则或模型的知识库来解析审计事件，由于审计事件的规模较大，手动定义规范很容易破环行为抽象的可扩展性。</li>
  <li>识别大规模审计事件的行为边界：所有单个行为之间都有因果关系，这使得分析人员很难划分事件范围并区分行为边界。</li>
</ol>

<h3 id="3-混淆技术在-powershell-攻击检测中的有效性">3. 混淆技术在 PowerShell 攻击检测中的有效性</h3>

<p>作者选择了五种具有代表性的混淆方案，并结合不同构造层次的模糊技术和不同的编码方法，前四种混淆方案如下图所示，而对于方案 S5 ，作者采用了基于 AST 的混淆。</p>

<p><img src="https://bushuo.github.io/image/2021-08-01-02.png" alt="混淆方案" /></p>

<p>通过对 75 个良性样本和 75 个恶意样本使用上述混淆方式处理后，将原始样本和混淆后的脚本上传至 VirusTotal，实验结果如下图所示，几乎所有混淆方案都可以有效地绕过杀毒软件。</p>

<p><img src="https://bushuo.github.io/image/2021-08-01-03.png" alt="VirusTotal 检测结果" /></p>

<h1 id="0x03-总体框架">0x03 总体框架</h1>
<hr />

<p>作者为 PowerShell 设计了一种有效的、轻量级的去混淆机制，并将其作为关键模块，开发了第一个语义感知的 PowerShell 攻击检测系统，攻击检测过程分为如下图三个阶段：</p>

<p><img src="https://bu-shuo.github.io/image/2021-08-01-04.png" alt="总体框架" /></p>

<ol>
  <li><strong>去混淆阶段（Deobfuscation phase）：</strong> 将 AST 子树视为混淆的最小单元，并在子树上执行恢复，最后构造去混淆后的脚本。这种去混淆功能不仅有利于对 PowerShell 攻击的检测，而且有利于对其分析和取证。</li>
  <li><strong>训练和检测阶段（Training and detection phases）：</strong> 对恶意 PowerShell 脚本数据库采用经典的面向对象关联（Objective-oriented Association，OOA）挖掘算法，实现自动提取 31 条用于签名匹配的 OOA 规则。</li>
  <li><strong>应用场景（Application scenarios）：</strong> 基于去混淆的语义感知攻击检测系统主要是基于静态分析，与动态分析的检测方法相比，具有更高的代码覆盖率和更低的开销；与现有基于静态分析的攻击检测方法相比，更适合处理混淆场景。所以作者提出的系统可以部署到实时攻击检测、大规模恶意软件自动分析等系统。</li>
</ol>

<h1 id="0x04-powershell-去混淆技术">0x04 PowerShell 去混淆技术</h1>
<hr />

<p>作者之所以使用静态方式去混淆主要有以下两点原因：</p>

<ol>
  <li>动态方法需要对现有系统或解释器进行额外的修改或者带来更大的开销</li>
  <li>动态方法有一个已知的限制，即低覆盖率。</li>
</ol>

<p>由于在实际攻击中，脚本中可恢复的部分与其他部分之间没有明确界限，特别是当脚本被多层混淆时。所以作者针对该问题设计了一种基于 AST 子树的方法，首先定位可恢复的片段然后再重新构建原始脚本。具体过程如下图所示，可以分为五个阶段：</p>

<p><img src="https://bushuo.github.io/image/2021-08-01-05.png" alt="去混淆流程" /></p>

<ol>
  <li><strong>可疑子树的提取（Extract Suspicious Subtrees）：</strong> 采用了微软的官方库 System.Management.Automation.Language 将 PowerShell 脚本解析为 AST ，因为只有两种方法可以将恢复的部分直接通过管道（pipes）或间接通过变量传递给上面的顶点。如下图所示，一种为红色块所指的 PipelineAst 节点，另一种为蓝色块所指的 AssignmentStatementAst 节点。并以宽度优先的方式遍历 AST，并将可疑的子树推入堆栈中进行后续步骤。
<img src="https://bushuo.github.io/image/2021-08-01-06.png" alt="两种节点" /></li>
  <li><strong>基于子树的混淆检测（Subtree-based Obfuscation Detection）：</strong> 部署二进制分类器通过脚本片段熵、标记（token）的长度、AST 类型的分布和 AST 的深度四种特征去发现混淆的子树或脚本片段（并不是所有满足模糊特征的树都是可恢复的子树），最终选取了 76 种特征并使用基于梯度下降的 Logistics 回归算法进行分类。</li>
  <li><strong>基于仿真的恢复（Emulation-based Recovery）：</strong> 设置一个 PowerShell 执行会话，并执行在上一步中检测到的混淆部分，若为可恢复子树，则返回恢复后的脚本；若为不可恢复子树，则将其标记为非模糊子树，继续下一个模糊子树。</li>
  <li><strong>抽象语法树的更新（AST Update）：</strong> 将恢复的子树或脚本片段解析为新的 AST 并替换更新 AST，循环这样的过程直到没有混淆的子树。</li>
  <li><strong>后处理阶段（Post processing）：</strong> 对混淆过程中引入的语法及更改通过正则表达式进行定位，并进行相应的修改，重新构建脚本片段以获得消除混淆后的脚本。</li>
</ol>

<h1 id="0x05-语义感知的-powershell-攻击检测系统">0x05 语义感知的 PowerShell 攻击检测系统</h1>
<hr />

<p>基于语义感知的系统除了可以提供稳定的攻击检测，还允许对恶意行为进行解释和分类。由于 PowerShell 脚本的 API 包含更高级别的语义，因此 PowerShell 脚本的语义可以更容易地通过命令和函数集来理解，所以该系统采用 API 集来进行语义检测。</p>

<h3 id="1-训练阶段training-phase">1. 训练阶段（Training Phase）</h3>
<p>使用解析器解析得到一组对应于每个去混淆脚本的 AST 节点，然后提取它们的值并对其进行规范化：转换为小写字母，再删除无关字符，最后检查别名。采用基于 OOA 挖掘的经典分类方法对命令项集合进行检测，如下图所示，字母表示命令或函数，用红色标记的集合表示从恶意脚本中提取的项目集，再使用 FP-growth 算法生成频度模式，然后选择满足支持度和置信度大于用户指定的最小值规则的模式。最终，作者为 PowerShell 攻击提取了 31 条确定的 OOA 规则。</p>

<p><img src="https://bushuo.github.io/image/2021-08-01-07.png" alt="提取项目集" /></p>

<h3 id="2-检测阶段detection-phase">2. 检测阶段（Detection Phase）</h3>
<p>使用去混淆的脚本作为项目集，并尝试匹配预先训练的 OOA 规则，结果不仅显示了恶意分数，还显示了脚本的语义。</p>

<h1 id="0x06-实验评估">0x06 实验评估</h1>
<hr />

<h3 id="1-混淆检测的准确性">1. 混淆检测的准确性</h3>

<p><img src="https://bu-shuo.github.io/image/2021-08-01-08.png" alt="混淆检测的准确性" /></p>

<h3 id="2-脚本恢复的质量">2. 脚本恢复的质量</h3>

<p><img src="https://bushuo.github.io/image/2021-08-01-09.png" alt="脚本恢复的质量" /></p>

<h3 id="3-去混淆的效率">3. 去混淆的效率</h3>

<p><img src="https://bushuo.github.io/image/2021-08-01-10.png" alt="去混淆的效率" /></p>

<h3 id="4-去混淆对-av-检测和语义感知检测结果的影响">4. 去混淆对 AV 检测和语义感知检测结果的影响</h3>

<p><img src="https://bushuo.github.io/image/2021-08-01-11.png" alt="去混淆对 AV 检测和语义感知检测结果的影响" /></p>
<h3 id="5-去混淆方法中单个技术的影响">5. 去混淆方法中单个技术的影响</h3>

<p><img src="https://bushuo.github.io/image/2021-08-01-12.png" alt="去混淆方法中单个技术的影响" /></p>

<h1 id="0x07-现有工作">0x07 现有工作</h1>
<hr />

<h3 id="1-基于脚本的恶意软件检测">1. 基于脚本的恶意软件检测</h3>
<p>如下图所示，对于脚本的恶意软件检测可以分为三类：</p>

<p><img src="https://bushuo.github.io/image/2021-08-01-13.png" alt="恶意软件检测分类" /></p>

<h3 id="2-去混淆方法">2. 去混淆方法</h3>
<p>对于二进制文件的混淆，精确识别混淆是去混淆的第一步，使用基于签名的方法可以在可执行文件种搜索已知的混淆。为了处理未知的混淆方式，最新的研究采用了多特征混淆检测。而对于脚本语言来说，Liu 等人提出了 PSDEM，这是一种主要用于 PowerShell 去混淆的手动方法。Adbelkhalek 提出的 JSDES 是一种混合的方法，用于识别混淆处理的可疑函数，然后对这些函数去混淆。Lu 等人提出的基于语义的方法使用了动态分析和程序切片技术来去混淆，但这种方法的问题是代码覆盖率低。</p>

<h1 id="0x08-总结">0x08 总结</h1>
<hr />

<p>这篇论文作者首先设计了第一种有效且轻量级的去混淆方法，该方法在子树级别上执行混淆检测和基于方针的恢复，在此基础上作者又进一步设计了第一个基于语义感知的 PowerShell 攻击检测系统，该系统包括 31 个 OOA 规则。通过实验，在使用作者设计的去混淆方法后，Windows Defender 和 Virus Total 的攻击检测率从 0.3% 和 2.65% 大幅提高到 75.0% 和 90.0%，而语义感知攻击检测系统的平局准确率为 92.3%，误报率为 0%，要优于 Windows Defender 和 VirusTotal。</p>
:ET